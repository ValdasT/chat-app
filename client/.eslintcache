[{"/Users/valdas/mano/chat-app/client/src/index.js":"1","/Users/valdas/mano/chat-app/client/src/App.js":"2","/Users/valdas/mano/chat-app/client/src/reportWebVitals.js":"3","/Users/valdas/mano/chat-app/client/src/components/layout/Navbar.js":"4","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatList.js":"5","/Users/valdas/mano/chat-app/client/src/components/Drawer/Drawer.js":"6","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatBubble.js":"7","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/Message.js":"8","/Users/valdas/mano/chat-app/client/src/components/Spinner/LoadingAnswer.js":"9","/Users/valdas/mano/chat-app/client/src/Pages/Test.js":"10","/Users/valdas/mano/chat-app/client/src/Pages/NotFound.js":"11","/Users/valdas/mano/chat-app/client/src/Pages/MainPage.js":"12","/Users/valdas/mano/chat-app/client/src/components/layout/ThemeChanger.jsx":"13","/Users/valdas/mano/chat-app/client/src/components/FormInput/FormInput.jsx":"14","/Users/valdas/mano/chat-app/client/src/context/MessageContext.js":"15","/Users/valdas/mano/chat-app/client/src/context/ApiCalls.js":"16","/Users/valdas/mano/chat-app/client/src/context/AuthContext.js":"17","/Users/valdas/mano/chat-app/client/src/context/GlobalState.js":"18","/Users/valdas/mano/chat-app/client/src/context/AppReducer.js":"19","/Users/valdas/mano/chat-app/client/src/utils/utils.js":"20","/Users/valdas/mano/chat-app/client/src/components/Header/Header.jsx":"21","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Button/CustomButton.jsx":"22","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Switch/CustomSwitch.jsx":"23","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/RoundButton/Roundbutton.jsx":"24","/Users/valdas/mano/chat-app/client/src/components/Chatbar/Chatbar.jsx":"25","/Users/valdas/mano/chat-app/client/src/Pages/Auth.jsx":"26","/Users/valdas/mano/chat-app/client/src/components/Authorization/Login.jsx":"27","/Users/valdas/mano/chat-app/client/src/components/Authorization/SignUp.jsx":"28"},{"size":500,"mtime":1610624907884,"results":"29","hashOfConfig":"30"},{"size":964,"mtime":1611336116168,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1610624907885,"results":"32","hashOfConfig":"30"},{"size":796,"mtime":1610625857271,"results":"33","hashOfConfig":"30"},{"size":726,"mtime":1611143623356,"results":"34","hashOfConfig":"30"},{"size":1607,"mtime":1611304872753,"results":"35","hashOfConfig":"30"},{"size":5391,"mtime":1611044118131,"results":"36","hashOfConfig":"30"},{"size":9246,"mtime":1610980156721,"results":"37","hashOfConfig":"30"},{"size":550,"mtime":1610625857269,"results":"38","hashOfConfig":"30"},{"size":174,"mtime":1610626192719,"results":"39","hashOfConfig":"30"},{"size":330,"mtime":1610626047220,"results":"40","hashOfConfig":"30"},{"size":713,"mtime":1611317611337,"results":"41","hashOfConfig":"30"},{"size":1211,"mtime":1611243058319,"results":"42","hashOfConfig":"30"},{"size":596,"mtime":1611319094919,"results":"43","hashOfConfig":"30"},{"size":3640,"mtime":1610957462748,"results":"44","hashOfConfig":"30"},{"size":2440,"mtime":1610721998956,"results":"45","hashOfConfig":"30"},{"size":344,"mtime":1610721998958,"results":"46","hashOfConfig":"30"},{"size":1621,"mtime":1610721998959,"results":"47","hashOfConfig":"30"},{"size":632,"mtime":1610721998957,"results":"48","hashOfConfig":"30"},{"size":771,"mtime":1611069375284,"results":"49","hashOfConfig":"30"},{"size":771,"mtime":1611317270372,"results":"50","hashOfConfig":"30"},{"size":375,"mtime":1611334263177,"results":"51","hashOfConfig":"30"},{"size":462,"mtime":1611241082551,"results":"52","hashOfConfig":"30"},{"size":230,"mtime":1611331862180,"results":"53","hashOfConfig":"30"},{"size":1821,"mtime":1611335669943,"results":"54","hashOfConfig":"30"},{"size":487,"mtime":1611336729014,"results":"55","hashOfConfig":"30"},{"size":3163,"mtime":1611336696633,"results":"56","hashOfConfig":"30"},{"size":5346,"mtime":1611337902161,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"5ijqab",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/valdas/mano/chat-app/client/src/index.js",[],["124","125"],"/Users/valdas/mano/chat-app/client/src/App.js",[],"/Users/valdas/mano/chat-app/client/src/reportWebVitals.js",[],"/Users/valdas/mano/chat-app/client/src/components/layout/Navbar.js",[],"/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatList.js",[],"/Users/valdas/mano/chat-app/client/src/components/Drawer/Drawer.js",["126","127"],"import React, { Fragment, useContext, useState, useEffect, memo } from 'react';\n// import { updateUser } from '../../context/ApiCalls'\n// import { GlobalContext } from '../../context/GlobalState';\n// import { useUserSession } from '../../context/AuthContext';\n// import { MostlyCloudyNight32, MostlyCloudy32, Settings32, Information16 } from '@carbon/icons-react';\nimport { IoIosArrowForward } from 'react-icons/io';\n\nimport './Drawer.scss';\n\nconst Drawer = memo(() => {\n    const [openDrawer, setOpendDrawer] = useState(true);\n    // const { darkMode, setDarkMode, setSpinner, showAlert } = useContext(GlobalContext)\n    // const { user, setUser } = useUserSession()\n    // const [tab, setTab] = useState(0);\n    const openCloseDrawer = () => {\n        setOpendDrawer(!openDrawer)\n    }\n\n    return (\n        <Fragment>\n            <div className={openDrawer ?\n                'drawerBox open-drawer' :\n                'drawerBox close-drawer'}>\n                <div className='drawerbody'>\n                    <div>\n                        <div  onClick={openCloseDrawer} className='expand-button'>\n                            <IoIosArrowForward className={openDrawer ? 'open-button' : 'close-button'} />\n                        </div>\n                        <div>\n                            {/* dkmsdklf mskldmf klsdmf klsdmf klsdm flks dmf sdf sdfk smdfklsdmflksd mflkms dlkfmsdkl fmsd klmfksl dmfkls dmfkl smdklfm sdklm fsdkl fmksld mfkl smd */}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </Fragment>\n    );\n})\n\nexport default Drawer;","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatBubble.js",["128","129","130"],"import React, { useContext, memo } from 'react';\nimport Message from './Message';\n// import { GlobalContext } from '../../context/GlobalState';\n// import { useUserSession } from '../../context/AuthContext';\nimport LoadingAnswer from '../Spinner/LoadingAnswer';\nimport { v4 as uuidv4 } from 'uuid';\nimport logo from '../../img/profile.jpeg'\nimport otherLogo from '../../img/profile2.jpg'\nimport { showTimeFromMS } from '../../utils/utils' \n// import './Chat.css';\nimport './Chat.scss';\n\nconst ChatBubble = memo(({ message }) => {\n    // const { darkMode, showAlert } = useContext(GlobalContext)\n    // const { user } = useUserSession()\n\n    return (\n        <div>\n            {message.sender === 'me' ?\n                <div className='message'>\n                    <div className='message-block' style={{ flexDirection: \"row-reverse\" }}>\n                        <div>\n                            <img className='userAvatar' id={`Hugo avatar ${uuidv4()} `} alt=\"my photo\" src={logo} />\n                        </div>\n                        <div className=\"point-right\"></div>\n                        <div className=\"bubble\">\n                            <Message response={message} />\n                        </div>\n                    </div>\n                    <div className=\"message-time\" align={\"right\"} >{showTimeFromMS(message.time)}</div>\n                </div>\n                :\n                <div className='message'>\n                    <div className='message-block'>\n                        <div>\n                            <img className='userAvatar' id={`Profile avatar ${uuidv4()} `} alt={`first-name last-name`}\n                                src={otherLogo} />\n                        </div>\n                        <div className=\"point-left\"></div>\n                        <div className=\"bubble bubble-left\">\n                            <Message response={message} />\n                        </div>\n                    </div>\n                    <div className=\"message-time\" align={\"left\"} >{showTimeFromMS(message.time)}</div>\n                </div>\n\n            }\n            {/* <div className='message'>\n                <div>\n                    {message.sender === 'me' ? <img className='userAvatar' id={`Hugo avatar ${uuidv4()} `} alt=\"my photo\" src={logo} />\n                        : <img className='userAvatar' id={`Profile avatar ${uuidv4()} `} alt={`first-name last-name`}\n                            src={otherLogo} />}\n\n                </div>\n                <div className={message.sender !== 'me' ? \"bubble bubble-left\" :\n                    \"bubble bubble-right\"}>\n                    <Message response={message} />\n                </div>\n            </div> */}\n\n\n\n            {/* <ListItem>\n                <Grid container>\n                    <Grid item xs={12} className={message.sender === 'hugo' ? \"d-flex\" : \"d-flex flex-row-reverse\"}>\n                        <div>\n                            {message.sender === 'hugo' ? <Avatar id={`Hugo avatar ${uuidv4()} `} alt=\"Hugo bot\" src={require(\"../../img/hugo_logo.svg\")} />\n                                : <Avatar id={`Profile avatar ${uuidv4()} `} alt={`${user['first-name']} ${user['last-name']}`}\n                                    src={`https://w3-services1.w3-969.ibm.com/myw3/unified-profile-photo/v1/image/${user.uid}?s=90`} />}\n                        </div>\n                        {darkMode ?\n                            <Fragment>\n                                {message.message.loading ?\n                                    <div className=\"bubble-loading bubble-left bubble-left-dark\"><LoadingAnswer /></div> :\n                                    <div style={message.message.answerURL ? { padding: '1.125em 1.5em 5px 1.5em' } : null}\n                                        className={message.sender === 'hugo' ? \"bubble bubble-left bubble-left-dark\" :\n                                            \"bubble bubble-right bubble-right-dark\"}>\n                                        <Message response={message} darkMode={darkMode} showAlert={showAlert} />\n                                    </div>\n                                }\n                            </Fragment>\n                            :\n                            <Fragment>\n                                {message.message.loading ?\n                                    <div className=\"bubble-loading bubble-left bubble-left-light\"><LoadingAnswer /></div> :\n                                    <div style={message.message.answerURL ? { padding: '1.125em 1.5em 5px 1.5em' } : null}\n                                        className={message.sender === 'hugo' ? \"bubble bubble-left bubble-left-light\" :\n                                            \"bubble bubble-right bubble-right-light\"}>\n                                        <Message response={message} darkMode={darkMode} showAlert={showAlert} />\n                                    </div>\n                                }\n                            </Fragment>\n                        }\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div className={darkMode ? \"messageTime-dark\" : \"messageTime-light\"} align={message.sender === 'hugo' ? \"left\" : \"right\"} >{message.time}</div>\n                    </Grid>\n                </Grid>\n            </ListItem> */}\n        </div>\n    );\n})\n\nexport default memo(ChatBubble);","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/Message.js",["131","132","133","134","135"],"import React, { Fragment, memo, useState, useContext } from 'react';\n// import ReactHtmlParser from 'react-html-parser';\n// import { v4 as uuidv4 } from 'uuid';\n// import { ThumbsDown24, ThumbsUp24, Copy24, RequestQuote24 } from '@carbon/icons-react';\n// import { Tooltip } from '@material-ui/core';\n// import { withStyles } from \"@material-ui/core/styles\";\n// import { voteAnswer } from '../../context/ApiCalls'\n// import { GlobalContext } from '../../context/GlobalState';\n// import { MessageContext } from '../../context/MessageContext';\n\n// import './Chat.css';\n\nconst Message = memo(({ response }) => {\n    // const { setSpinner } = useContext(GlobalContext)\n    // const { addMessage, getAnswer } = useContext(MessageContext);\n    // const [thumb, setThumb] = useState('');\n\n    const faqText = 'Questions that were most frequently asked in the last 7 days';\n    // const TooltipWithStyles = withStyles({\n    //     tooltip: {\n    //         fontSize: \"12px\",\n    //     }\n    // })(Tooltip);\n    const tooltipText = {\n        like: 'I like this',\n        dislike: 'I dislike this',\n        copy: 'Copy answer URL',\n        ticket: 'Submit a new ticket'\n    }\n\n    // const redirecToCAH = link => {\n    //     window.open(link, '_blank');\n    // }\n\n    // const copyToClipBoard = (url) => {\n    //     navigator.clipboard.writeText(`${url}`);\n    //     showAlert('success', 'Copied!', 'Answer URL has been copied.', 2000);\n    // }\n\n    // const vote = async (vote, answer) => {\n    //     if (!thumb) {\n    //         try {\n    //             setSpinner(true);\n    //             if (vote === 'like') {\n    //                 let res = await voteAnswer(answer, 1)\n    //                 setThumb('liked')\n    //                 console.log(res);\n    //             } else if (vote === 'dislike') {\n    //                 let res = await voteAnswer(answer, 0)\n    //                 setThumb('disliked')\n    //                 console.log(res);\n    //             }\n    //         } catch (err) {\n    //             showAlert('danger', err.name, err.message);\n    //         }\n    //         setSpinner(false);\n    //     }\n    // }\n\n    // const sendQuestion = (question, recommendation) => {\n    //     addMessage({\n    //         message: question\n    //     });\n    //     getAnswer(question, recommendation)\n    // }\n\n    return (\n        <div className=\"answer\">\n            {response.message}\n            {/* <div className=\"answer\">\n                {typeof response.message === 'string' ? ReactHtmlParser(response.message) : null}\n            </div>\n            <div className=\"answer\">\n                {response.message.answer ? response.message.preAnswerText ?\n                    <div>\n                        <strong>\n                            {`${response.message.preAnswerText}: ${ReactHtmlParser(response.message.discoveryQuestion)}`}\n                        </strong>\n                        <div style={{ marginTop: \"10px\" }}>\n                            {ReactHtmlParser(response.message.answer)}\n                        </div>\n                    </div>\n                    :\n                    <Fragment>\n                        {ReactHtmlParser(response.message.answer)}\n                        {(response.message.raiseTicketButton && response.message.raiseTicketButton.button && !response.message.raiseTicketButton.text) ?\n                            <i className=\"copy\" style={{ paddingLeft: \"5px\" }} onClick={() => getAnswer('ticket')}><TooltipWithStyles\n                                title={tooltipText.ticket} arrow placement=\"top\"><RequestQuote24 /></TooltipWithStyles>\n                            </i> : null\n                        }\n                    </Fragment>\n                    : null}\n            </div>\n            <div>\n                {response.message.recommendations && response.message.recommendations.length ?\n                    <div className={darkMode ? \"recommendations recommendations-dark\" : \"recommendations recommendations-light\"}>\n                        <strong style={{ paddingBottom: \"5px\" }}>{response.message.recommendationsText}:</strong>\n                        <ul style={{ listStyleType: 'disc', paddingLeft: \"20px\", marginBottom: \"0px\" }} >\n                            {response.message.recommendations.map(recommendation => (\n                                <li onClick={() => sendQuestion(recommendation.question, recommendation)} key={uuidv4()}><i className=\"recommendation\"> {recommendation.question}</i></li>\n                            ))}\n                        </ul>\n                    </div>\n                    : null}\n            </div>\n            <div>\n                {response.message.faq ?\n                    <div className={darkMode ? \"recommendations recommendations-dark\" : \"recommendations recommendations-light\"}>\n                        <strong style={{ paddingBottom: \"5px\" }}>{faqText}:</strong>\n                        <ul style={{ listStyleType: 'disc', paddingLeft: \"20px\", marginBottom: \"0px\" }} >\n                            {response.message.faq.map(e => (\n                                <li onClick={() => sendQuestion(e)} key={uuidv4()}><i className=\"recommendation\"> {e}</i></li>\n                            ))}\n                        </ul>\n                    </div>\n                    : null}\n            </div>\n            <div>\n                {(response.message.raiseTicketButton && response.message.raiseTicketButton.button && response.message.raiseTicketButton.text)\n                    || thumb === 'disliked' ?\n                    <div style={{ padding: \"10px 0px 0px\" }}>\n                        {response.message.raiseTicketButton.text ?\n                            <span style={{ fontStyle: \"italic\", paddingRight: '5px' }}>{response.message.raiseTicketButton.text}</span> : null}\n                        <i className=\"copy\" onClick={() => getAnswer('ticket')}><TooltipWithStyles title={tooltipText.ticket} arrow placement=\"top\"><RequestQuote24 /></TooltipWithStyles></i>\n                    </div> : null\n                }\n            </div>\n            {response.message.ticketList && response.message.ticketList.length ?\n                <div style={{ paddingTop: \"5px\" }}>\n                    {response.message.ticketList.map(ticket => (\n                        <div key={ticket.buttonText}>\n                            <div className=\"flex-row\">\n                                <button aria-label={`${ticket.buttonText} button`} className=\"primary-btn newTicketBtn d-inline\" onClick={() => redirecToCAH(ticket.link)}>{ticket.buttonText}</button>\n                                <div className=\"newTicketLabel d-inline\">{`${ticket.text}`}</div>\n                            </div>\n                        </div>\n\n                    ))}\n                </div>\n                : null}\n            <div className=\"answer\">\n                {response.message.answerURL ?\n                    <div>\n                        <div className={darkMode ? \"rating-dark d-flex\" : \"rating-light d-flex\"}>\n                            <div className=\"flex-grow-1 bd-highlight \">\n                                {response.message.userQuestionId && response.message.top_class !== 'assistant' ?\n                                    <span>\n                                        {thumb === 'disliked' ? null : <div className=\"like grow\">\n                                            <i onClick={() => vote('like', response)} style={thumb === 'liked' ? { color: '#27831b' } : null}\n                                                className=\"like\" aria-hidden=\"true\"><TooltipWithStyles title={tooltipText.like}\n                                                    arrow placement=\"top\"><ThumbsUp24 /></TooltipWithStyles></i></div>}\n                                        {thumb === 'liked' ? null : <div className=\"dislike grow\">\n                                            <i onClick={() => vote('dislike', response)} style={thumb === 'disliked' ? { color: '#b61b1b' } : null}\n                                                className=\"dislike\" aria-hidden=\"true\"><TooltipWithStyles title={tooltipText.dislike}\n                                                    arrow placement=\"top\"><ThumbsDown24 /></TooltipWithStyles></i></div>}\n                                    </span>\n                                    : null}\n                                <div className=\"copy grow\">\n                                    <i onClick={() => copyToClipBoard(response.message.answerURL)}\n                                        className=\"copy\" aria-hidden=\"true\"><TooltipWithStyles title={tooltipText.copy} arrow placement=\"top\">\n                                            <Copy24 /></TooltipWithStyles></i>\n                                </div>\n                            </div>\n                            <div className={darkMode ? \"bd-highlight confidence-dark\" : \"bd-highlight confidence-light\"}>\n                                {`From: ${response.message.top_class.toUpperCase()}, Confidence: ${Math.ceil(response.message.confidence * 100)}%`}\n                            </div>\n                        </div>\n                    </div>\n                    : null}\n            </div> */}\n        </div>\n    );\n})\n\nexport default Message;","/Users/valdas/mano/chat-app/client/src/components/Spinner/LoadingAnswer.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/Test.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/NotFound.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/MainPage.js",["136","137"],"import React, { Fragment, useContext, useState, memo } from 'react';\nimport Chatbar from '../components/Chatbar/Chatbar'\nimport ChatList from '../components/Chatwindow/ChatList'\nimport Drawer from '../components/Drawer/Drawer'\n// import Navbar from '../components/layout/Navbar'\n// import { GlobalContext } from '../../context/GlobalState';\n// import { Loading } from 'carbon-components-react'\n\nconst MainPage = () => {\n\n    return (\n        <Fragment>\n            <div >\n                <div style={{ display: 'flex' }}>\n                    <Drawer />\n                    <ChatList />\n                </div>\n                <Chatbar />\n            </div>\n        </Fragment>)\n}\n\n\n\nexport default memo(MainPage);\n","/Users/valdas/mano/chat-app/client/src/components/layout/ThemeChanger.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/FormInput/FormInput.jsx",[],"/Users/valdas/mano/chat-app/client/src/context/MessageContext.js",["138","139"],"import React, { createContext, useReducer, useContext, memo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n// import { sendAnswer } from './ApiCalls';\n// import { GlobalContext } from './GlobalState';\n// import { useUserSession } from './AuthContext';\n\n// Initial state\nconst initialState = {\n    chatMessages: [\n        {\n            id : uuidv4(),\n            time: Date.now(),\n            sender: 'Johan Super',\n            message: `Hello dear friend!`\n            \n        },\n       {\n            id : uuidv4(),\n            time: Date.now(),\n            sender: 'me',\n            message: ` whoooop whooop!!!`\n            \n        },\n    ]\n}\n\n// Reducer\nconst messageReducer = (state, action) => {\n    switch (action.type) {\n        // case 'DELETE_MESSAGE':\n        //   return {\n        //     ...state,\n        //     chatMessages: state.chatMessages.filter(message => message.id !== action.payload)\n        //   }\n        case 'ADD_MESSAGE':\n            return {\n                ...state,\n                chatMessages: [...state.chatMessages, action.payload]\n            }\n        case 'EDIT_MESSAGE':\n            return {\n                ...state,\n                chatMessages: state.chatMessages.map(chatMessage => chatMessage.message.id === action.payload.id ?\n                    { ...chatMessage, message: action.payload.message } : chatMessage)\n            }\n        default:\n            throw new Error(`unknown action type: ${action.type}`);;\n    }\n}\n\n// Create context\nexport const MessageContext = createContext(initialState);\n\n// Provider component\nexport const MessageProvider = memo(({ children }) => {\n    // const { showAlert } = useContext(GlobalContext);\n    // const { user } = useUserSession();\n    const [state, dispatch] = useReducer(messageReducer, initialState);\n    const [exampleQuestions, setExampleQuestions] = useState();\n\n    // Actions\n    const addMessage = message => {\n        let chatMessage = {\n            id: uuidv4(),\n            time: Date.now(),\n            sender: message.sender ? message.sender : 'me',\n            message: message\n        }\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: chatMessage\n        });\n    }\n\n    const editMessage = (message, id) => {\n        message.id = id;\n        message.time = 13241515;\n        dispatch({\n            type: 'EDIT_MESSAGE',\n            payload: message\n        });\n    }\n\n    const getAnswer = async (message, recomendation) => {\n        // try {\n        //     let token = getLastToken(state.chatMessages);\n        //     let tempMessage = {\n        //         question: message,\n        //         loading: true,\n        //         id: uuidv4(),\n        //         token:token\n        //     }\n        //     addMessage({\n        //         message: tempMessage,\n        //         sender: 'hugo',\n        //     });\n\n        //     let res = await sendAnswer(tempMessage, token, user, recomendation);\n        //     if (res.id) {\n        //         editMessage({\n        //             message: res,\n        //             sender: 'hugo',\n        //         }, res.id);\n        //     } else {\n        //         addMessage({\n        //             message: res,\n        //             sender: 'hugo',\n        //         });\n        //     }\n        // } catch (err) {\n        //     showAlert('danger', err.name, err.message);\n        // }\n    };\n\n    return (<MessageContext.Provider value={{\n        chatMessages: state.chatMessages,\n        addMessage,\n        getAnswer,\n        exampleQuestions,\n        setExampleQuestions\n    }}>\n        {children}\n    </MessageContext.Provider>);\n}\n)","/Users/valdas/mano/chat-app/client/src/context/ApiCalls.js",[],["140","141"],"/Users/valdas/mano/chat-app/client/src/context/AuthContext.js",[],["142","143"],"/Users/valdas/mano/chat-app/client/src/context/GlobalState.js",[],"/Users/valdas/mano/chat-app/client/src/context/AppReducer.js",["144"],"export default (state, action) => {\n  switch (action.type) {\n    case 'DARK_MODE':\n      return {\n        ...state,\n        darkMode: action.payload\n      }\n    case 'SPINNER':\n      return {\n        ...state,\n        spinner: action.payload\n      }\n    case 'SET_USER':\n      return {\n        ...state,\n        user: { ...action.payload }\n      }\n    case 'SET_REGIONS':\n      return {\n        ...state,\n        regions: action.payload\n      }\n      case 'SET_KBS':\n        return {\n          ...state,\n          kbsNames: action.payload\n          }\n    default:\n      throw new Error(`unknown action type: ${action.type}`);;\n  }\n}","/Users/valdas/mano/chat-app/client/src/utils/utils.js",[],"/Users/valdas/mano/chat-app/client/src/components/Header/Header.jsx",["145"],"import React, { memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport ThemeMode from '../layout/ThemeChanger'\nimport RoundButton from '../CustomButtons/RoundButton/Roundbutton'\nimport { GiExitDoor } from 'react-icons/gi'\nimport { IoSettingsOutline, IoLogInOutline } from 'react-icons/io5';\nimport './Header.scss';\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"navigation\">\n                <ThemeMode />\n                <RoundButton icon={<IoSettingsOutline />} />\n                <Link to='/login'>\n                    <RoundButton icon={<IoLogInOutline />} />\n                </Link>\n                <RoundButton icon={<GiExitDoor />} />\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Button/CustomButton.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Switch/CustomSwitch.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/CustomButtons/RoundButton/Roundbutton.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Chatbar/Chatbar.jsx",["146","147"],"/Users/valdas/mano/chat-app/client/src/Pages/Auth.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Authorization/Login.jsx",["148","149"],"/Users/valdas/mano/chat-app/client/src/components/Authorization/SignUp.jsx",["150"],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":37},{"ruleId":"155","severity":1,"message":"159","line":1,"column":49,"nodeType":"157","messageId":"158","endLine":1,"endColumn":58},{"ruleId":"155","severity":1,"message":"156","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":27},{"ruleId":"155","severity":1,"message":"160","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":21},{"ruleId":"161","severity":1,"message":"162","line":23,"column":29,"nodeType":"163","endLine":23,"endColumn":117},{"ruleId":"155","severity":1,"message":"164","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":25},{"ruleId":"155","severity":1,"message":"165","line":1,"column":33,"nodeType":"157","messageId":"158","endLine":1,"endColumn":41},{"ruleId":"155","severity":1,"message":"156","line":1,"column":43,"nodeType":"157","messageId":"158","endLine":1,"endColumn":53},{"ruleId":"155","severity":1,"message":"166","line":18,"column":11,"nodeType":"157","messageId":"158","endLine":18,"endColumn":18},{"ruleId":"155","severity":1,"message":"167","line":24,"column":11,"nodeType":"157","messageId":"158","endLine":24,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":37},{"ruleId":"155","severity":1,"message":"165","line":1,"column":39,"nodeType":"157","messageId":"158","endLine":1,"endColumn":47},{"ruleId":"155","severity":1,"message":"156","line":1,"column":44,"nodeType":"157","messageId":"158","endLine":1,"endColumn":54},{"ruleId":"155","severity":1,"message":"168","line":75,"column":11,"nodeType":"157","messageId":"158","endLine":75,"endColumn":22},{"ruleId":"151","replacedBy":"169"},{"ruleId":"153","replacedBy":"170"},{"ruleId":"151","replacedBy":"171"},{"ruleId":"153","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":1,"column":1,"nodeType":"175","endLine":31,"endColumn":2},{"ruleId":"155","severity":1,"message":"176","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":21},{"ruleId":"177","severity":1,"message":"178","line":19,"column":8,"nodeType":"179","endLine":19,"endColumn":17,"suggestions":"180"},{"ruleId":"177","severity":1,"message":"181","line":26,"column":8,"nodeType":"179","endLine":26,"endColumn":17,"suggestions":"182"},{"ruleId":"155","severity":1,"message":"183","line":9,"column":37,"nodeType":"157","messageId":"158","endLine":9,"endColumn":42},{"ruleId":"155","severity":1,"message":"184","line":10,"column":24,"nodeType":"157","messageId":"158","endLine":10,"endColumn":37},{"ruleId":"155","severity":1,"message":"184","line":10,"column":24,"nodeType":"157","messageId":"158","endLine":10,"endColumn":37},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'LoadingAnswer' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Fragment' is defined but never used.","'useState' is defined but never used.","'faqText' is assigned a value but never used.","'tooltipText' is assigned a value but never used.","'editMessage' is assigned a value but never used.",["185"],["186"],["185"],["186"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'memo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'message'. Either exclude it or remove the dependency array.","ArrayExpression",["187"],"React Hook useCallback has a missing dependency: 'addMessage'. Either include it or remove the dependency array.",["188"],"'watch' is assigned a value but never used.","'setFormInputs' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: []",{"range":"193","text":"194"},"Update the dependencies array to be: [addMessage, message]",{"range":"195","text":"196"},[724,733],"[]",[887,896],"[addMessage, message]"]