[{"/Users/valdas/mano/chat-app/client/src/index.js":"1","/Users/valdas/mano/chat-app/client/src/App.js":"2","/Users/valdas/mano/chat-app/client/src/reportWebVitals.js":"3","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatList.js":"4","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatBubble.js":"5","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/Message.js":"6","/Users/valdas/mano/chat-app/client/src/components/Spinner/LoadingAnswer.js":"7","/Users/valdas/mano/chat-app/client/src/Pages/Test.js":"8","/Users/valdas/mano/chat-app/client/src/Pages/NotFound.js":"9","/Users/valdas/mano/chat-app/client/src/Pages/MainPage.js":"10","/Users/valdas/mano/chat-app/client/src/components/layout/ThemeChanger.jsx":"11","/Users/valdas/mano/chat-app/client/src/components/FormInput/FormInput.jsx":"12","/Users/valdas/mano/chat-app/client/src/context/MessageContext.js":"13","/Users/valdas/mano/chat-app/client/src/context/AuthContext.js":"14","/Users/valdas/mano/chat-app/client/src/context/GlobalState.js":"15","/Users/valdas/mano/chat-app/client/src/context/AppReducer.js":"16","/Users/valdas/mano/chat-app/client/src/utils/utils.js":"17","/Users/valdas/mano/chat-app/client/src/components/Header/Header.jsx":"18","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Button/CustomButton.jsx":"19","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Switch/CustomSwitch.jsx":"20","/Users/valdas/mano/chat-app/client/src/components/CustomButtons/RoundButton/Roundbutton.jsx":"21","/Users/valdas/mano/chat-app/client/src/components/Chatbar/Chatbar.jsx":"22","/Users/valdas/mano/chat-app/client/src/Pages/Auth.jsx":"23","/Users/valdas/mano/chat-app/client/src/components/Authorization/Login.jsx":"24","/Users/valdas/mano/chat-app/client/src/components/Authorization/SignUp.jsx":"25","/Users/valdas/mano/chat-app/client/src/utils/firebase.js":"26","/Users/valdas/mano/chat-app/client/src/components/PrivateRoutes/PrivateRouts.jsx":"27","/Users/valdas/mano/chat-app/client/src/components/Drawer/Drawer.jsx":"28","/Users/valdas/mano/chat-app/client/src/services/ApiCalls.js":"29","/Users/valdas/mano/chat-app/client/src/utils/api.js":"30","/Users/valdas/mano/chat-app/client/src/components/Spinner/Spinner.jsx":"31","/Users/valdas/mano/chat-app/client/src/components/Modal/Modal.jsx":"32","/Users/valdas/mano/chat-app/client/src/components/Modal/ModalList.jsx":"33"},{"size":545,"mtime":1612787234848,"results":"34","hashOfConfig":"35"},{"size":1436,"mtime":1612787359885,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":1610624907885,"results":"37","hashOfConfig":"35"},{"size":726,"mtime":1611143623356,"results":"38","hashOfConfig":"35"},{"size":5391,"mtime":1611044118131,"results":"39","hashOfConfig":"35"},{"size":9234,"mtime":1611590008579,"results":"40","hashOfConfig":"35"},{"size":550,"mtime":1610625857269,"results":"41","hashOfConfig":"35"},{"size":186,"mtime":1611834496202,"results":"42","hashOfConfig":"35"},{"size":342,"mtime":1611834507211,"results":"43","hashOfConfig":"35"},{"size":522,"mtime":1612798151727,"results":"44","hashOfConfig":"35"},{"size":1211,"mtime":1611243058319,"results":"45","hashOfConfig":"35"},{"size":596,"mtime":1611319094919,"results":"46","hashOfConfig":"35"},{"size":3640,"mtime":1610957462748,"results":"47","hashOfConfig":"35"},{"size":3818,"mtime":1612787994662,"results":"48","hashOfConfig":"35"},{"size":1264,"mtime":1612798255704,"results":"49","hashOfConfig":"35"},{"size":446,"mtime":1612788757519,"results":"50","hashOfConfig":"35"},{"size":771,"mtime":1611069375284,"results":"51","hashOfConfig":"35"},{"size":1287,"mtime":1612788529751,"results":"52","hashOfConfig":"35"},{"size":375,"mtime":1611334263177,"results":"53","hashOfConfig":"35"},{"size":462,"mtime":1611241082551,"results":"54","hashOfConfig":"35"},{"size":261,"mtime":1611589095297,"results":"55","hashOfConfig":"35"},{"size":1754,"mtime":1611589886832,"results":"56","hashOfConfig":"35"},{"size":487,"mtime":1611336729014,"results":"57","hashOfConfig":"35"},{"size":3656,"mtime":1612798168789,"results":"58","hashOfConfig":"35"},{"size":5994,"mtime":1612361939283,"results":"59","hashOfConfig":"35"},{"size":461,"mtime":1612431986151,"results":"60","hashOfConfig":"35"},{"size":453,"mtime":1611837936396,"results":"61","hashOfConfig":"35"},{"size":1479,"mtime":1611590902102,"results":"62","hashOfConfig":"35"},{"size":3500,"mtime":1612361692098,"results":"63","hashOfConfig":"35"},{"size":445,"mtime":1612432403287,"results":"64","hashOfConfig":"35"},{"size":1024,"mtime":1612527318565,"results":"65","hashOfConfig":"35"},{"size":2894,"mtime":1612797608043,"results":"66","hashOfConfig":"35"},{"size":514,"mtime":1612789195059,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"5ijqab",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/valdas/mano/chat-app/client/src/index.js",[],["138","139"],"/Users/valdas/mano/chat-app/client/src/App.js",[],"/Users/valdas/mano/chat-app/client/src/reportWebVitals.js",[],"/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatList.js",[],"/Users/valdas/mano/chat-app/client/src/components/Chatwindow/ChatBubble.js",["140","141","142"],"import React, { useContext, memo } from 'react';\nimport Message from './Message';\n// import { GlobalContext } from '../../context/GlobalState';\n// import { useUserSession } from '../../context/AuthContext';\nimport LoadingAnswer from '../Spinner/LoadingAnswer';\nimport { v4 as uuidv4 } from 'uuid';\nimport logo from '../../img/profile.jpeg'\nimport otherLogo from '../../img/profile2.jpg'\nimport { showTimeFromMS } from '../../utils/utils' \n// import './Chat.css';\nimport './Chat.scss';\n\nconst ChatBubble = memo(({ message }) => {\n    // const { darkMode, showAlert } = useContext(GlobalContext)\n    // const { user } = useUserSession()\n\n    return (\n        <div>\n            {message.sender === 'me' ?\n                <div className='message'>\n                    <div className='message-block' style={{ flexDirection: \"row-reverse\" }}>\n                        <div>\n                            <img className='userAvatar' id={`Hugo avatar ${uuidv4()} `} alt=\"my photo\" src={logo} />\n                        </div>\n                        <div className=\"point-right\"></div>\n                        <div className=\"bubble\">\n                            <Message response={message} />\n                        </div>\n                    </div>\n                    <div className=\"message-time\" align={\"right\"} >{showTimeFromMS(message.time)}</div>\n                </div>\n                :\n                <div className='message'>\n                    <div className='message-block'>\n                        <div>\n                            <img className='userAvatar' id={`Profile avatar ${uuidv4()} `} alt={`first-name last-name`}\n                                src={otherLogo} />\n                        </div>\n                        <div className=\"point-left\"></div>\n                        <div className=\"bubble bubble-left\">\n                            <Message response={message} />\n                        </div>\n                    </div>\n                    <div className=\"message-time\" align={\"left\"} >{showTimeFromMS(message.time)}</div>\n                </div>\n\n            }\n            {/* <div className='message'>\n                <div>\n                    {message.sender === 'me' ? <img className='userAvatar' id={`Hugo avatar ${uuidv4()} `} alt=\"my photo\" src={logo} />\n                        : <img className='userAvatar' id={`Profile avatar ${uuidv4()} `} alt={`first-name last-name`}\n                            src={otherLogo} />}\n\n                </div>\n                <div className={message.sender !== 'me' ? \"bubble bubble-left\" :\n                    \"bubble bubble-right\"}>\n                    <Message response={message} />\n                </div>\n            </div> */}\n\n\n\n            {/* <ListItem>\n                <Grid container>\n                    <Grid item xs={12} className={message.sender === 'hugo' ? \"d-flex\" : \"d-flex flex-row-reverse\"}>\n                        <div>\n                            {message.sender === 'hugo' ? <Avatar id={`Hugo avatar ${uuidv4()} `} alt=\"Hugo bot\" src={require(\"../../img/hugo_logo.svg\")} />\n                                : <Avatar id={`Profile avatar ${uuidv4()} `} alt={`${user['first-name']} ${user['last-name']}`}\n                                    src={`https://w3-services1.w3-969.ibm.com/myw3/unified-profile-photo/v1/image/${user.uid}?s=90`} />}\n                        </div>\n                        {darkMode ?\n                            <Fragment>\n                                {message.message.loading ?\n                                    <div className=\"bubble-loading bubble-left bubble-left-dark\"><LoadingAnswer /></div> :\n                                    <div style={message.message.answerURL ? { padding: '1.125em 1.5em 5px 1.5em' } : null}\n                                        className={message.sender === 'hugo' ? \"bubble bubble-left bubble-left-dark\" :\n                                            \"bubble bubble-right bubble-right-dark\"}>\n                                        <Message response={message} darkMode={darkMode} showAlert={showAlert} />\n                                    </div>\n                                }\n                            </Fragment>\n                            :\n                            <Fragment>\n                                {message.message.loading ?\n                                    <div className=\"bubble-loading bubble-left bubble-left-light\"><LoadingAnswer /></div> :\n                                    <div style={message.message.answerURL ? { padding: '1.125em 1.5em 5px 1.5em' } : null}\n                                        className={message.sender === 'hugo' ? \"bubble bubble-left bubble-left-light\" :\n                                            \"bubble bubble-right bubble-right-light\"}>\n                                        <Message response={message} darkMode={darkMode} showAlert={showAlert} />\n                                    </div>\n                                }\n                            </Fragment>\n                        }\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div className={darkMode ? \"messageTime-dark\" : \"messageTime-light\"} align={message.sender === 'hugo' ? \"left\" : \"right\"} >{message.time}</div>\n                    </Grid>\n                </Grid>\n            </ListItem> */}\n        </div>\n    );\n})\n\nexport default memo(ChatBubble);","/Users/valdas/mano/chat-app/client/src/components/Chatwindow/Message.js",[],"/Users/valdas/mano/chat-app/client/src/components/Spinner/LoadingAnswer.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/Test.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/NotFound.js",[],"/Users/valdas/mano/chat-app/client/src/Pages/MainPage.js",[],"/Users/valdas/mano/chat-app/client/src/components/layout/ThemeChanger.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/FormInput/FormInput.jsx",[],"/Users/valdas/mano/chat-app/client/src/context/MessageContext.js",["143","144"],"import React, { createContext, useReducer, useContext, memo, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n// import { sendAnswer } from './ApiCalls';\n// import { GlobalContext } from './GlobalState';\n// import { useUserSession } from './AuthContext';\n\n// Initial state\nconst initialState = {\n    chatMessages: [\n        {\n            id : uuidv4(),\n            time: Date.now(),\n            sender: 'Johan Super',\n            message: `Hello dear friend!`\n            \n        },\n       {\n            id : uuidv4(),\n            time: Date.now(),\n            sender: 'me',\n            message: ` whoooop whooop!!!`\n            \n        },\n    ]\n}\n\n// Reducer\nconst messageReducer = (state, action) => {\n    switch (action.type) {\n        // case 'DELETE_MESSAGE':\n        //   return {\n        //     ...state,\n        //     chatMessages: state.chatMessages.filter(message => message.id !== action.payload)\n        //   }\n        case 'ADD_MESSAGE':\n            return {\n                ...state,\n                chatMessages: [...state.chatMessages, action.payload]\n            }\n        case 'EDIT_MESSAGE':\n            return {\n                ...state,\n                chatMessages: state.chatMessages.map(chatMessage => chatMessage.message.id === action.payload.id ?\n                    { ...chatMessage, message: action.payload.message } : chatMessage)\n            }\n        default:\n            throw new Error(`unknown action type: ${action.type}`);;\n    }\n}\n\n// Create context\nexport const MessageContext = createContext(initialState);\n\n// Provider component\nexport const MessageProvider = memo(({ children }) => {\n    // const { showAlert } = useContext(GlobalContext);\n    // const { user } = useUserSession();\n    const [state, dispatch] = useReducer(messageReducer, initialState);\n    const [exampleQuestions, setExampleQuestions] = useState();\n\n    // Actions\n    const addMessage = message => {\n        let chatMessage = {\n            id: uuidv4(),\n            time: Date.now(),\n            sender: message.sender ? message.sender : 'me',\n            message: message\n        }\n        dispatch({\n            type: 'ADD_MESSAGE',\n            payload: chatMessage\n        });\n    }\n\n    const editMessage = (message, id) => {\n        message.id = id;\n        message.time = 13241515;\n        dispatch({\n            type: 'EDIT_MESSAGE',\n            payload: message\n        });\n    }\n\n    const getAnswer = async (message, recomendation) => {\n        // try {\n        //     let token = getLastToken(state.chatMessages);\n        //     let tempMessage = {\n        //         question: message,\n        //         loading: true,\n        //         id: uuidv4(),\n        //         token:token\n        //     }\n        //     addMessage({\n        //         message: tempMessage,\n        //         sender: 'hugo',\n        //     });\n\n        //     let res = await sendAnswer(tempMessage, token, user, recomendation);\n        //     if (res.id) {\n        //         editMessage({\n        //             message: res,\n        //             sender: 'hugo',\n        //         }, res.id);\n        //     } else {\n        //         addMessage({\n        //             message: res,\n        //             sender: 'hugo',\n        //         });\n        //     }\n        // } catch (err) {\n        //     showAlert('danger', err.name, err.message);\n        // }\n    };\n\n    return (<MessageContext.Provider value={{\n        chatMessages: state.chatMessages,\n        addMessage,\n        getAnswer,\n        exampleQuestions,\n        setExampleQuestions\n    }}>\n        {children}\n    </MessageContext.Provider>);\n}\n)","/Users/valdas/mano/chat-app/client/src/context/AuthContext.js",[],"/Users/valdas/mano/chat-app/client/src/context/GlobalState.js",[],"/Users/valdas/mano/chat-app/client/src/context/AppReducer.js",[],"/Users/valdas/mano/chat-app/client/src/utils/utils.js",[],"/Users/valdas/mano/chat-app/client/src/components/Header/Header.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Button/CustomButton.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/CustomButtons/Switch/CustomSwitch.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/CustomButtons/RoundButton/Roundbutton.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Chatbar/Chatbar.jsx",[],"/Users/valdas/mano/chat-app/client/src/Pages/Auth.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Authorization/Login.jsx",["145","146"],"/Users/valdas/mano/chat-app/client/src/components/Authorization/SignUp.jsx",["147"],"import React, { useState, memo, useRef } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\"\nimport CustomButton from '../CustomButtons/Button/CustomButton';\nimport RoundButton from '../CustomButtons/RoundButton/Roundbutton'\nimport { useAuth } from \"../../context/AuthContext\"\nimport { AiOutlineGoogle } from 'react-icons/ai'\nimport { GrFacebookOption } from 'react-icons/gr'\nimport './Authorization.scss';\n\nconst SignUp = ({ setForm }) => {\n    const { signUp, signInWithGoogle, signInWithFacebook } = useAuth()\n    const { register, handleSubmit, watch, errors, reset } = useForm();\n    const [formInputs, setFormInputs] = useState({ email: '', password: '' })\n    const history = useHistory()\n\n    const password = useRef({});\n    password.current = watch(\"password\", \"\");\n\n    const signInWithGoogleProvider = async () => {\n        try {\n            await signInWithGoogle();\n            history.push(\"/\")\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const signInWithFacebookProvider = async () => {\n        try {\n            await signInWithFacebook();\n            history.push(\"/\")\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const onSubmit = async (data) => {\n        try {\n            const { email, password, displayName } = data;\n            const user = await signUp(\n                email,\n                password,\n                displayName\n            );\n            console.log(user);\n            history.push(\"/\")\n            reset()\n        } catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div className='sign-in'>\n            <div className=\"header-text\">Create Account</div>\n            <div className=\"login-options\">\n                <RoundButton onClick={signInWithGoogleProvider} icon={<AiOutlineGoogle />} />\n                <RoundButton onClick={signInWithFacebookProvider} icon={<GrFacebookOption />} />\n            </div>\n            <div>or use your email for registration</div>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"form-group\" >\n                    <input style={{ borderColor: errors.displayName ? '#b40000' : null }}\n                        className=\"form-field\" defaultValue={formInputs.displayName}\n                        ref={register({ required: true })}\n                        type=\"input\" spellCheck=\"false\" placeholder=\"Name\" name=\"displayName\"\n                        id='displayName' autoFocus autoComplete=\"username\" />\n                    <label style={{ color: errors.name ? '#b40000' : null }}\n                        htmlFor=\"displayName\" className=\"form-label\">Name</label>\n                    {errors.name && <span className='danger-text'>Name is required</span>}\n                </div>\n                <div className=\"form-group\" >\n                    <input style={{ borderColor: errors.email ? '#b40000' : null }}\n                        className=\"form-field\" defaultValue={formInputs.email}\n                        ref={register({ required: true })}\n                        type=\"input\" spellCheck=\"false\" placeholder=\"Email\"\n                        name=\"email\" id='email' autoComplete=\"email\" />\n                    <label style={{ color: errors.email ? '#b40000' : null }}\n                        htmlFor=\"email\" className=\"form-label\">Email</label>\n                    {errors.email && <span className='danger-text'>Email is required</span>}\n                </div>\n                <div className=\"form-group\">\n                    <input style={{ borderColor: errors.password ? '#b40000' : null }}\n                        className=\"form-field\" defaultValue={formInputs.password} autoComplete=\"new-password\"\n                        ref={register({\n                            required: true,\n                            minLength: {\n                                value: 8,\n                                message: \"Password must have at least 8 characters\"\n                            }\n                        })}\n                        type=\"password\" placeholder=\"Password\" name=\"password\" id='password' />\n                    <label style={{ color: errors.password ? '#b40000' : null }}\n                        htmlFor=\"password\" className=\"form-label\">Password</label>\n                    {errors.password && <span className='danger-text'>{errors.password.message ?\n                        errors.password.message : 'Password is required'}</span>}\n                </div>\n                <div className=\"form-group\">\n                    <input style={{ borderColor: errors.password2 ? '#b40000' : null }}\n                        className=\"form-field\" defaultValue={formInputs.password2} autoComplete=\"new-password2\"\n                        ref={register({\n                            required: true,\n                            minLength: {\n                                value: 8,\n                                message: \"Password must have at least 8 characters\"\n                            },\n                            validate: value =>\n                                value === password.current || \"The passwords do not match\"\n                        })}\n                        type=\"password\" placeholder=\"Password\" name=\"password2\" id='password2' />\n                    <label style={{ color: errors.password2 ? '#b40000' : null }}\n                        htmlFor=\"password2\" className=\"form-label\">Repeat password</label>\n                    {errors.password2 && <span className='danger-text'>{errors.password2.message ?\n                        errors.password2.message : 'Password is required'}</span>}\n                </div>\n\n                <div className='buttons'>\n                    <CustomButton type='submit'> Sign up </CustomButton>\n                </div>\n            </form>\n\n            <div onClick={setForm}>Have an account? Sign in </div>\n        </div>\n    )\n}\n\nexport default memo(SignUp);","/Users/valdas/mano/chat-app/client/src/utils/firebase.js",[],"/Users/valdas/mano/chat-app/client/src/components/PrivateRoutes/PrivateRouts.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Drawer/Drawer.jsx",[],"/Users/valdas/mano/chat-app/client/src/services/ApiCalls.js",[],"/Users/valdas/mano/chat-app/client/src/utils/api.js",[],"/Users/valdas/mano/chat-app/client/src/components/Spinner/Spinner.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Modal/Modal.jsx",[],"/Users/valdas/mano/chat-app/client/src/components/Modal/ModalList.jsx",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":27},{"ruleId":"152","severity":1,"message":"156","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":21},{"ruleId":"157","severity":1,"message":"158","line":23,"column":29,"nodeType":"159","endLine":23,"endColumn":117},{"ruleId":"152","severity":1,"message":"153","line":1,"column":44,"nodeType":"154","messageId":"155","endLine":1,"endColumn":54},{"ruleId":"152","severity":1,"message":"160","line":75,"column":11,"nodeType":"154","messageId":"155","endLine":75,"endColumn":22},{"ruleId":"152","severity":1,"message":"161","line":14,"column":58,"nodeType":"154","messageId":"155","endLine":14,"endColumn":68},{"ruleId":"152","severity":1,"message":"162","line":17,"column":24,"nodeType":"154","messageId":"155","endLine":17,"endColumn":37},{"ruleId":"152","severity":1,"message":"162","line":14,"column":24,"nodeType":"154","messageId":"155","endLine":14,"endColumn":37},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'LoadingAnswer' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'editMessage' is assigned a value but never used.","'addToArray' is assigned a value but never used.","'setFormInputs' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]